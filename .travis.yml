#Deploy script for Foku-api

language: python

python:
  - "3.8"

env:
  # - AWS_USER_ID="xxxxxxxx" AWS_ECR_API="xxxxxxxxx.dkr.ecr.sa-east-1.amazonaws.com/MYAPP"
  - PACKAGE_VERSION="1.0.8"
services:
   - docker
branches:
    only:
        - master

install:
  #- echo "install nothing!" #Install goes here
  - pip install -r requirements.txt

script:
  - python manage.py test
  #- echo "no tests!" #Tests go here
  # - scripts/start.sh
  # - scripts/stop.sh
  # - sed -i -e 's/\r$/\n/' scripts/start.sh
  # - sed -i -e 's/\r$/\n/' scripts/stop.sh
  # - sed -i -e 's/\r$/\n/' scripts/install.sh #correct files endings
  - chmod +x scripts/start.sh
  - chmod +x scripts/stop.sh
  - chmod +x scripts/install.sh
  - zip -r -q latest *  && echo "success" || echo "failure"
  - mkdir -p dpl_cd_upload
  - mv latest.zip dpl_cd_upload/latest.zip 
 
#This script will upload the built containers to ECR to be deployed on a single EC2 instance with docker
#Give everything to ECR
after_success:
  - docker --version  # document the version travis is using
  - sudo pip install awscli # install aws cli w/o sudo
  - export PATH=$PATH:$HOME/.local/bin # put aws in the path
  - aws configure set aws_access_key_id $AWS_ACCESS_ID
  - aws configure set aws_secret_access_key $AWS_SECRET_KEY
  - aws configure set preview.cloudfront true
  - echo $(aws ecr get-login --region us-east-2 --no-include-email) #needs AWS_ACCESS_KEY_ID and AWS_SECRET_ACCESS_KEY envvars
  - eval $(aws ecr get-login --region us-east-2 --no-include-email) #needs AWS_ACCESS_KEY_ID and AWS_SECRET_ACCESS_KEY envvars
  - sudo docker build -t arquichat .
  - sudo docker tag arquichat:latest 374139594143.dkr.ecr.us-east-2.amazonaws.com/arquichat:latest
  - sudo docker push $AWS_ECR_API:latest
  - sudo docker images

deploy:
- provider: s3 #To upload the code to s3
  access_key_id: $AWS_ACCESS_ID
  secret_access_key: $AWS_SECRET_KEY
  local_dir: dpl_cd_upload #from where
  skip_cleanup: true #use cache (doesn't work...)
  bucket: chat-deploy #target bucket to use
  region: us-east-2
  upload-dir: latest
- provider: codedeploy #Uploading to target group
  revision_type: github
  access_key_id: $AWS_ACCESS_ID
  secret_access_key: $AWS_SECRET_KEY
  bucket: chat-deploy #target bucket to use, definaed before
  key: latest/latest.zip #Source code, you can use any name but must be consistent
  bundle_type: zip
  application: arquichat # si no funciona es api
  deployment_group: testingdeploy #aca hay qeu cambiar para producto final AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
  region: us-east-2
  wait_until_deployed: true #wise thing to do
  on:
    branch: master

